const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const multer = require('multer');


const storage = multer.diskStorage({
    destination: function(req, file, cb)  {      // destination properties which is the function which defines where to store the incoming files and
                                                //  & get access(req) to the folder request in this function to file(file) you callback(cb)
        cb(null, './uploads/');     //execute cb in the end and queue it to pass the potential err and the path where you wanna stores
    },
    filename: function(req, file, cb) {     // which how the file name should be named multer will execute this function whenever a file is recieved
        const now = new Date().toISOString();
        const date = now.replace(/:/g, '-');
        cb(null, date + file.originalname);
    }
});

// const upload = multer({ storage: storage }); following execute the files we post but it give the binary format


// filefilter will check if the incoming image is of particular type and accept the accept or reject it
const fileFilter = (req, file, cb) => {
    
    if(file.mimetype === 'image/jpeg' || file.mimetype === 'image/png' || file.mimetype === 'image/jpg') {
    // accept a file
        cb(null, true);
    } else {
    // reject a file
        cb(null, false);
    }           
}; 

const upload = multer({
    storage: storage, 
    limits: {
        fileSize: 1024 * 1024 * 5
    },
    fileFilter: fileFilter
});          //execute multer like this basically initialize it

const Movie = require('../models/movie');  //acquire the moive model schema where attributes have been defined in it 

// handling the GET request for every items
router.get('/', (req, res ,next) => {

    Movie.find()
        .select('name summary _id movieImage')
        .exec()
        .then(docs => {
            const response = {
                count: docs.length,
                // following below code will create an array of all the movies
                movies: docs.map(doc => {
                    return {
                        name: doc.name,
                        movieImage:doc.movieImage,
                        summary: doc.summary,
                        _id: doc._id,
                        request: {
                            type: 'GET',
                            url: 'http://localhost:4000/movies/' + doc._id
                        }
                    };  
                })
            };
            // console.log(docs);
            res.status(200).json(response);
        })
        .catch(err => {
            console.log(err);
            res.status(500).json({
                error: err
            });
        });
});


// handling the post request to post new items
router.post('/', upload.single('movieImage'), (req, res ,next) => {
    const movie = new Movie({
        _id: new mongoose.Types.ObjectId(),  // creatre a unique ID for each items
        name: req.body.name,
        movieImage: req.file.path,
        summary: req.body.summary
    });
    movie
        .save()
        .then(result => {
            console.log(result);
            res.status(201).json({
                message : "Created Successfully",
                createdMovie: {
                    name: result.name,
                    summary: result.summary,
                    _id : result._id,
                    request: {
                        type: 'GET',
                        url: 'http://localhost:4000/movies/' + result._id
                    }
                }
            });
        })
        .catch(err => {
             console.log(err);
             res.status(500).json({
                 error: err
             });
        }); 
});


// handling the GET request for a particular Item using the ID generated by Mongoose
router.get('/:movieId', (req, res, next) => {
    const id = req.params.movieId;
    Movie.findById(id)
        .select('name summary _id movieImage')
        .exec()
        .then(doc => {
            console.log('From Database', doc);
            if(doc) {
                res.status(200).json({
                    movie: doc,
                    request: {
                        type: 'GET',
                        url: 'http://localhost:4000/movies/'
                    }
                });
            } else {
                res.status(404).json({
                    message: 'No valid entry for provided ID'
                });
            }
        })
        .catch(err => {
            console.log(err);
            res.status(500).json({
                error: err
            });
        });
});


// updating the Data for the particular Items
router.patch('/:movieId', (req, res, next) => {
    const id = req.params.movieId;
    const updateOps = {};
    for (const ops of req.body) {
        updateOps[ops.propName] = ops.value;
    }
    Movie.update({ _id: id }, { $set: updateOps })
        .exec()
        .then( result => {
            res.status(200).json({
                message: 'Movie Details Updated',
                request: {
                    type: 'GET',
                    url: 'http://localhost:4000/movies/' + id
                }
            });

        })
        .catch(err => {
            console.log(err);
            res.status(500).json({
                error: err
            });
        });
});


// deleting the items from database using the ID of item you wanna delete
router.delete('/:movieId', (req, res, next) => {
    const id = req.params.movieId
    Movie.remove({_id : id})
        .exec()
        .then(result => {
            res.status(200).json({
                message: 'Entries Deleted Successfully',
                request: {
                    type: 'POST',
                    url: 'http://localhost:4000/movies',
                    body: { name: String, summary: String }
                }
            });
        })
        .catch(err => {
            console.log(err);
            res.status(500).json({
                error: err
            });
        });
});

module.exports = router;